2018-07-05 20:50:06,951 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:50:17,929 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 13.117 seconds (JVM running for 14.671)
2018-07-05 20:50:47,849 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/2 HTTP/1.1
2018-07-05 20:50:47,849 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 20:50:48,968 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (1118ms)
2018-07-05 20:50:48,968 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 20:50:48,969 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 12:50:48 GMT
2018-07-05 20:50:48,969 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 20:50:48,969 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 20:50:48,971 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":2,"name":"AAA","age":20}
2018-07-05 20:50:48,972 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (30-byte body)
2018-07-05 20:52:52,817 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:53:05,471 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:53:09,192 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 5.007 seconds (JVM running for 185.934)
2018-07-05 20:53:19,091 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:53:20,095 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  C
2018-07-05 20:53:21,175 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 2.661 seconds (JVM running for 197.917)
2018-07-05 20:53:40,933 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:54:20,659 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:54:22,283 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  fallback; reason was: null
2018-07-05 20:54:24,225 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 4.172 seconds (JVM running for 260.967)
2018-07-05 20:54:28,645 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:54:29,622 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  fallback; reason was: null
2018-07-05 20:54:30,847 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 3.35 seconds (JVM running for 267.589)
2018-07-05 20:56:13,793 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:56:18,174 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  fallback; reason was: null
2018-07-05 20:56:21,889 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 10.522 seconds (JVM running for 11.554)
2018-07-05 20:56:51,152 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/2 HTTP/1.1
2018-07-05 20:56:51,152 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 20:56:51,675 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (522ms)
2018-07-05 20:56:51,675 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 20:56:51,675 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 12:56:51 GMT
2018-07-05 20:56:51,676 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 20:56:51,676 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 20:56:51,678 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":2,"name":"AAA","age":20}
2018-07-05 20:56:51,678 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (30-byte body)
2018-07-05 20:56:54,863 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 20:56:54,863 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 20:56:54,875 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (11ms)
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 12:56:54 GMT
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":4,"name":"王五","age":87}
2018-07-05 20:56:54,876 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
2018-07-05 20:57:09,064 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 20:57:09,064 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 20:57:10,073 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  fallback; reason was: null
2018-07-05 20:57:11,109 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- ERROR SocketTimeoutException: connect timed out (2044ms)
2018-07-05 20:57:11,111 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1220)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:984)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:152)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:80)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:48)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1.call(OperatorRetryWithPredicate.java:127)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:79)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:45)
	at rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer.request(ScalarSynchronousObservable.java:276)
	at rx.Subscriber.setProducer(Subscriber.java:209)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:138)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:129)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10247)
	at rx.Observable.subscribe(Observable.java:10214)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:444)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:341)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:63)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:97)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:108)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OperatorSubscribeOn$1.call(OperatorSubscribeOn.java:94)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

2018-07-05 20:57:11,116 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END ERROR
2018-07-05 20:57:11,280 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 20:57:11,281 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 20:57:12,282 ERROR (ConsumerFeignClientFallbackFactory.java:27)-  fallback; reason was: null
2018-07-05 20:57:13,284 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- ERROR SocketTimeoutException: connect timed out (2002ms)
2018-07-05 20:57:13,286 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] java.net.SocketTimeoutException: connect timed out
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)
	at java.net.Socket.connect(Socket.java:589)
	at sun.net.NetworkClient.doConnect(NetworkClient.java:175)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:463)
	at sun.net.www.http.HttpClient.openServer(HttpClient.java:558)
	at sun.net.www.http.HttpClient.<init>(HttpClient.java:242)
	at sun.net.www.http.HttpClient.New(HttpClient.java:339)
	at sun.net.www.http.HttpClient.New(HttpClient.java:357)
	at sun.net.www.protocol.http.HttpURLConnection.getNewHttpClient(HttpURLConnection.java:1220)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect0(HttpURLConnection.java:1156)
	at sun.net.www.protocol.http.HttpURLConnection.plainConnect(HttpURLConnection.java:1050)
	at sun.net.www.protocol.http.HttpURLConnection.connect(HttpURLConnection.java:984)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream0(HttpURLConnection.java:1564)
	at sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1492)
	at java.net.HttpURLConnection.getResponseCode(HttpURLConnection.java:480)
	at feign.Client$Default.convertResponse(Client.java:152)
	at feign.Client$Default.execute(Client.java:74)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:80)
	at org.springframework.cloud.netflix.feign.ribbon.FeignLoadBalancer.execute(FeignLoadBalancer.java:48)
	at com.netflix.client.AbstractLoadBalancerAwareClient$1.call(AbstractLoadBalancerAwareClient.java:104)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:303)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$3$1.call(LoadBalancerCommand.java:287)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:231)
	at rx.internal.util.ScalarSynchronousObservable$3.call(ScalarSynchronousObservable.java:228)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.drain(OnSubscribeConcatMap.java:286)
	at rx.internal.operators.OnSubscribeConcatMap$ConcatMapSubscriber.onNext(OnSubscribeConcatMap.java:144)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:185)
	at com.netflix.loadbalancer.reactive.LoadBalancerCommand$1.call(LoadBalancerCommand.java:180)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:94)
	at rx.internal.operators.OnSubscribeConcatMap.call(OnSubscribeConcatMap.java:42)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber$1.call(OperatorRetryWithPredicate.java:127)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.enqueue(TrampolineScheduler.java:73)
	at rx.internal.schedulers.TrampolineScheduler$InnerCurrentThreadScheduler.schedule(TrampolineScheduler.java:52)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:79)
	at rx.internal.operators.OperatorRetryWithPredicate$SourceSubscriber.onNext(OperatorRetryWithPredicate.java:45)
	at rx.internal.util.ScalarSynchronousObservable$WeakSingleProducer.request(ScalarSynchronousObservable.java:276)
	at rx.Subscriber.setProducer(Subscriber.java:209)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:138)
	at rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe.call(ScalarSynchronousObservable.java:129)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.subscribe(Observable.java:10247)
	at rx.Observable.subscribe(Observable.java:10214)
	at rx.observables.BlockingObservable.blockForSingle(BlockingObservable.java:444)
	at rx.observables.BlockingObservable.single(BlockingObservable.java:341)
	at com.netflix.client.AbstractLoadBalancerAwareClient.executeWithLoadBalancer(AbstractLoadBalancerAwareClient.java:112)
	at org.springframework.cloud.netflix.feign.ribbon.LoadBalancerFeignClient.execute(LoadBalancerFeignClient.java:63)
	at feign.SynchronousMethodHandler.executeAndDecode(SynchronousMethodHandler.java:97)
	at feign.SynchronousMethodHandler.invoke(SynchronousMethodHandler.java:76)
	at feign.hystrix.HystrixInvocationHandler$1.run(HystrixInvocationHandler.java:108)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:302)
	at com.netflix.hystrix.HystrixCommand$2.call(HystrixCommand.java:298)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:46)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:51)
	at rx.internal.operators.OnSubscribeDefer.call(OnSubscribeDefer.java:35)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:41)
	at rx.internal.operators.OnSubscribeDoOnEach.call(OnSubscribeDoOnEach.java:30)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:48)
	at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)
	at rx.Observable.unsafeSubscribe(Observable.java:10151)
	at rx.internal.operators.OperatorSubscribeOn$1.call(OperatorSubscribeOn.java:94)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:56)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction$1.call(HystrixContexSchedulerAction.java:47)
	at com.netflix.hystrix.strategy.concurrency.HystrixContexSchedulerAction.call(HystrixContexSchedulerAction.java:69)
	at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)

2018-07-05 20:57:13,288 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END ERROR
2018-07-05 20:59:45,506 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 20:59:55,424 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 21:00:03,811 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 11.04 seconds (JVM running for 12.135)
2018-07-05 21:00:30,002 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 21:00:30,003 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:00:30,423 ERROR (ConsumerFeignClientFallbackFactory.java:41)-  fallback; reason was: com.netflix.client.ClientException: Load balancer does not have available server for client: PROVIDER-SERVICE
2018-07-05 21:15:12,565 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 21:15:19,269 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignTurbineApplication in 8.106 seconds (JVM running for 10.088)
2018-07-05 21:16:09,740 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 21:16:09,740 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:16:09,940 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (199ms)
2018-07-05 21:16:09,940 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 21:16:09,940 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 13:16:09 GMT
2018-07-05 21:16:09,941 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 21:16:09,941 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 21:16:09,943 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":4,"name":"王五","age":87}
2018-07-05 21:16:09,943 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
2018-07-05 21:16:11,227 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 21:16:11,227 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:16:11,244 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (16ms)
2018-07-05 21:16:11,245 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 21:16:11,245 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 13:16:11 GMT
2018-07-05 21:16:11,245 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 21:16:11,245 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 21:16:11,245 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":4,"name":"王五","age":87}
2018-07-05 21:16:11,246 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
2018-07-05 21:16:42,518 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 21:16:48,647 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 21:16:56,641 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignFactoryApplication in 10.756 seconds (JVM running for 11.963)
2018-07-05 21:17:18,540 INFO (SpringApplication.java:593)- No active profile set, falling back to default profiles: default
2018-07-05 21:17:25,330 INFO (StartupInfoLogger.java:57)- Started HystrixConsumerFeignTurbineApplication in 8.331 seconds (JVM running for 9.928)
2018-07-05 21:17:35,638 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 21:17:35,639 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:17:36,274 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (632ms)
2018-07-05 21:17:36,274 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 21:17:36,275 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 13:17:36 GMT
2018-07-05 21:17:36,275 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 21:17:36,275 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 21:17:36,279 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":4,"name":"王五","age":87}
2018-07-05 21:17:36,279 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
2018-07-05 21:17:46,629 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/4 HTTP/1.1
2018-07-05 21:17:46,629 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:17:46,640 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (10ms)
2018-07-05 21:17:46,640 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 21:17:46,641 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 13:17:46 GMT
2018-07-05 21:17:46,641 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 21:17:46,641 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 21:17:46,641 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":4,"name":"王五","age":87}
2018-07-05 21:17:46,641 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
2018-07-05 21:17:49,379 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> GET http://PROVIDER-SERVICE/users/5 HTTP/1.1
2018-07-05 21:17:49,379 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] ---> END HTTP (0-byte body)
2018-07-05 21:17:49,394 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- HTTP/1.1 200 (15ms)
2018-07-05 21:17:49,395 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] content-type: application/json;charset=UTF-8
2018-07-05 21:17:49,395 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] date: Thu, 05 Jul 2018 13:17:49 GMT
2018-07-05 21:17:49,395 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] transfer-encoding: chunked
2018-07-05 21:17:49,395 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] 
2018-07-05 21:17:49,396 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] {"id":5,"name":"李四","age":20}
2018-07-05 21:17:49,396 DEBUG (Slf4jLogger.java:72)- [ConsumerFeignClient#getUser] <--- END HTTP (33-byte body)
